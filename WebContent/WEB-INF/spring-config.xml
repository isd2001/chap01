<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-2.0.xsd">
	<!-- DispatcherServlet이 요청을 받아서 이 설정파일에 등록된 빈(스프링에 의해서 관리되는 객체) 들을 통해서 요청을 
		처리하거나 응답을 만들어내게 된다. 기본적으로 등록해서 사용해야되는게 HandlerMapping - 필수 : DispatcherServlet으로 
		들어온 요청을 컨트롤러와 어떤식으로 Mapping 할껀지 결정하는 ViewResolver - 필수 : 컨트롤러에서 처리되며 리턴되는 
		뷰를 어떤식으로 해석해야되는지 결정하는 HandlerAdapter - 선택 : Mapping 된 컨트롤러 처리할때 필요한 작업을 설정하는 
		HandlerExceptionResolver - 선택 : 익셉션을 어떤식으로 처리할껀지 설정하는 MultipartResolver - 
		선택 : 멀티파트요청을 parsing 할때 사용할 라이브러리를 설정하는 -->
	<!-- HandlerMapping configuration : 등록할수 있는 HandlerMapping용 빈들은 여러가지가 있지만, 
		Spring3 버전대부터는 거의 RequestMappingHanlderMapping 빈을 이용해서 처리한다. 이 방식으로 연동되게 
		하는 컨트롤러가 Spring의 DI 기능을 활용할수 있기 때문에. -->
	<bean id="handlerMapping"
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
	<!-- controller registration -->
	<context:component-scan
		base-package="controllers" />
	<!-- <bean id="indexController" class="controllers.IndexController"/> 이 
		Controller가 scan 대상에 포함이기 때문에 따로 등록안해도 된다. -->

	<!-- viewResolver configuration -->
	<bean id="tilesViewResolver"
		class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" />
	<bean
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions" value="/WEB-INF/tiles/*.xml" />
	</bean>



	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- injecting bean register / 기본생성자로 생성시켜 관리에 들어가게 된다. -->
	<bean id="gson" class="com.google.gson.Gson" />
	<!-- injecting bean register / 생성시켜서 어느정도 설정을 잡아두고 Inject를 받아 써야되는 객체가 있다. 
		그럴 경우 해당객체가 set(xxxx) 계열로 설정을 잡을수 있다면 , 이건 property로 설정해서 등록시킬수 있다. String 
		을 포함한 기본밸류형태들은 value 로 설정을 할수 있고 , 객체로 설정을 해야 된다면, ref 라는 걸로 설정을 할수 있다. -->
	<bean id="grid" class="java.awt.GridLayout">
		<property name="columns" value="2" />
		<property name="rows" value="3" />
	</bean>
	<bean id="frame1" class="javax.swing.JFrame">
		<property name="title" value="Spring Inject" />
		<property name="alwaysOnTop" value="true" />
		<property name="layout" ref="grid" />
	</bean>

	<bean id="frame2" class="javax.swing.JFrame">
		<property name="title" value="injection" />
		<property name="layout" ref="grid" />
	</bean>

	<!-- mybatis bridge bean register -->

	<bean id="ds"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"
			value="oracle.jdbc.driver.OracleDriver" />
		<property name="url"
			value="jdbc:oracle:thin:@kkh.mockingu.com:1521:xe" />
		<property name="username" value="dev" />
		<property name="password" value="123" />
	</bean>

	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="ds" />
		<property name="mapperLocations"
			value="/WEB-INF/mappers/*.xml" />
	</bean>

	<bean id="sqlTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactory" />
	</bean>
	<context:component-scan base-package="models" />

	<!-- multipart resolver add (id 는 반드시 이걸로 설정 ) -->
	<bean
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		id="multipartResolver" />

	<!-- WebSocket Handler 1. namespaces 애서 websocket 체크 ! 2. mapping / handler 
		부분에는 websockethandler 를 extends 걸고 설계한 다움 websocket controller 객체의 id 를 설정하면 
		됨 (ref 처리됨 ) - websocket 처리용 객체는 bean을 수동으로 등록해서 이름을 줘도 되고, - component-scan 
		에 의해서 자동 등록되는 객체들은 , 앞에만 소문자로 바껴서 등록이 되기 때문에 <bean id="zulu" class="controllers.study.ZuluController"></bean> -->
	<websocket:handlers>
		<websocket:mapping handler="zuluController"
			path="/conn.do" />
	</websocket:handlers>

	<bean
		class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
	<!-- -->
	<mongo:mongo-client port="15635" host="kkh.mockingu.com" />
	<bean class="org.springframework.data.mongodb.core.MongoTemplate" id="mongoTemplate">
		<constructor-arg name="mongoClient" ref="mongoClient" />
		<constructor-arg value="dev" name="databaseName" />
	</bean>

</beans>






















